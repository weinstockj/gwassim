// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gwassim.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// traverse_cor
std::vector<int> traverse_cor(NumericMatrix x, float maxcor);
static SEXP gwassim_traverse_cor_try(SEXP xSEXP, SEXP maxcorSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type maxcor(maxcorSEXP);
    __result = Rcpp::wrap(traverse_cor(x, maxcor));
    return __result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gwassim_traverse_cor(SEXP xSEXP, SEXP maxcorSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gwassim_traverse_cor_try(xSEXP, maxcorSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int gwassim_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("std::vector<int>(*traverse_cor)(NumericMatrix,float)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP gwassim_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gwassim", "gwassim_traverse_cor", (DL_FUNC)gwassim_traverse_cor_try);
    R_RegisterCCallable("gwassim", "gwassim_RcppExport_validate", (DL_FUNC)gwassim_RcppExport_validate);
    return R_NilValue;
}
